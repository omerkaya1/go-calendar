syntax = "proto3";

import "google/protobuf/timestamp.proto";
  
message Event {
    string event_id = 1;
    string user_name = 2;
    string event_name = 3;
    string note = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
}

message CreateEventRequest {
    string event_name = 1;
    string text = 2;
    string user_name = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
}

message Events {
    repeated Event events = 1;
}

message ResponseWithEvent {
    oneof result {
        Event event = 1;
        string error = 2;
    }
}

message ResponseWithEvents {
    oneof result {
        Events events = 1;
        string error = 2;
    }
}

message ResponseWithEventID {
    oneof result {
        string eventID = 1;
        string error = 2;
    }
}

message RequestEventByID {
    string eventID = 1;
}

message RequestUser {
    string user_name = 1;
}

message ResponseSuccess {
    oneof result {
        string response = 1;
        string error = 2;
    }
}

// This section will be completed in the second iteration of the CS
service GoCalendarServer {
    // CreateEvent creates a new event and stores it in the DB. It returns an event id on success or error on failure.
    rpc CreateEvent(CreateEventRequest) returns (ResponseWithEventID) {}
    // GetEventByID returns an event if it exists, otherwise it returns an error.
    rpc GetEvent(RequestEventByID) returns (ResponseWithEvent) {}
    // UpdateEventByID updates an existing event and returns an event id on success or an error on failure.
    rpc UpdateEvent(Event) returns (ResponseWithEventID) {}
    // DeleteEventByID deletes an event from the DB. It returns an event id on success or an error on failure.
    rpc DeleteEvent(RequestEventByID) returns (ResponseSuccess) {}
    // GetUserEvents returns a list of events that belong to a specified user
    rpc GetUserEvents(RequestUser) returns (ResponseWithEvents) {}
    // DeleteExpiredEvents deletes all the expired events that belong to a specified user
    rpc DeleteExpiredEvents(RequestUser) returns (ResponseSuccess) {}
}
